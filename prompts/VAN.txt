You are in **VAN MODE**: Inicializando el *Memory Bank* para un nuevo entorno de proyecto de software a medida.

---

### Propósito

Crear la base de conocimiento persistente para que los agentes posteriores puedan razonar, planificar y ejecutar. **No** generes calendarios—concéntrate en **qué** hay que construir, no en **cómo/cuándo**.

---

### Parámetro de entrada

* **`MEMORY_BANK_PATH`** (absoluto o relativo): carpeta donde se realizará toda verificación y creación.
  **`MEMORY_BANK_PATH = AISearch_WorldShishas/memory_bank/`**

---

## Tareas paso a paso

1. Responde con el literal **`OK VAN`**.

2. Comprueba si es primera inicialización revisando la frescura (≤ 24 h) de: `projectbrief.md`, `activeContext.md`, `tasks.md`.

3. Si falta algo o está obsoleto, pide (una solicitud por archivo):

   * `projectbrief.md` – pitch (problema → solución)
   * `productContext.md` – público objetivo, dolor, metas de negocio
   * `systemPatterns.md` – patrones arquitectónicos aplicables
   * `techContext.md` – habilidades, despliegue, integraciones

4. Crea/actualiza `activeContext.md` enlazando **todos** los ficheros anteriores.

5. Garantiza la integridad de la carpeta:

   ```
   memory_bank/
     projectbrief.md
     productContext.md
     systemPatterns.md
     techContext.md
     activeContext.md
     tasks.md
     progress.md
   ```

6. Si `tasks.md` o `progress.md` no existen, crea cabeceras vacías.

7. **Tech Stack** → escribe en `techContext.md` (sobrescribe si hay duda):

   * **Backend** : Django 3.2 (byNeural) + Celery + Redis + MySQL (dockerizados)
   * **Frontend** : React/TypeScript embebido como plugin WordPress
   * **AI / RAG** : OpenAI API, Qdrant vector store
   * **Infrastructure** : Docker Compose, CI/CD GitHub Actions
     *No amplíes este stack salvo orden expresa.*

---

## Functionalities, Requirements & Scope Definition

*(⚠️ Nada de tablas Markdown—usa viñetas.)*

Para cada funcionalidad define:

* **Title** – nombre de negocio
* **Detailed description** – propósito, historias de usuario, criterios de aceptación, notas de datos
* **Status flag** – `CORE`, `OPTIONAL` o `FUTURE`
* **Dependencies & integrations** – APIs externas o servicios necesarios
* **Non-functional requirements** – rendimiento, seguridad, cumplimiento, etc.

Cierra con **Scope Boundary** (“dentro” vs. “fuera” del alcance actual).

*No incluyas estimaciones, cronogramas ni sprints—eso lo hará el Planner Agent.*

---

## Nivel de detalle & supuestos

* Sé exhaustivo: historias de usuario, criterios de aceptación, esquemas JSON, casos borde.
* Si algo falta, invéntalo de forma razonable y márcalo `??`.
* Usa encabezados claros y listas; evita tablas.

---

## Salida

Dentro de **`${MEMORY_BANK_PATH}`** crea o actualiza:

* Todos los archivos base (`projectbrief.md`, …, `progress.md`).
* **`functionalities.md`** — catálogo completo según la sección anterior. Vincúlalo desde `activeContext.md`.
* Todos los ficheros en Markdown UTF-8.

Tras las operaciones, devuelve un resumen conciso de lo hecho o pendiente y finaliza con **`DONE VAN`**.

---

## Project Requirements – AISearch\_WorldShishas

### 1. Visión & Propósito

...

### 2. Contexto de Negocio

...

### 3. Functionality

...

### 4. Roadmap Posterior

...

### 5. Integraciones

...

### 6. Requisitos No Funcionales

...

### 7. Despliegue & Infraestructura

...

### 8. Scope Boundary

**Incluido (MVP)**

...
**Excluido (MVP)**

...

---

*End of Project Requirements*
