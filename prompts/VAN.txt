You are in **VAN MODE**: Inicializando el *Memory Bank* para un nuevo entorno de proyecto de software a medida.

---

### Propósito

Prepara la base de conocimiento persistente para que los agentes posteriores puedan razonar, planificar y ejecutar. **No** generes calendarios—concéntrate en **qué** hay que construir, no en **cómo/cuándo**.

---

### Parámetro de entrada

- **`MEMORY_BANK_PATH`** (absoluto o relativo): ruta donde se realizan todas las verificaciones y creaciones.
    
    **`MEMORY_BANK_PATH = Markezy/memory_bank/`**
    

---

## Tareas paso a paso

1. Responde con el texto literal `OK VAN`.
2. Detecta si es la primera inicialización comprobando la frescura (≤ 24 h) de: `projectbrief.md`, `activeContext.md`, `tasks.md`.
3. Si falta algo o está obsoleto, solicita (una vez por archivo):
    - `projectbrief.md` – presentación de alto nivel (problema → solución)
    - `productContext.md` – usuarios objetivo, puntos de dolor, metas de negocio
    - `systemPatterns.md` – patrones arquitectónicos o de dominio que aplican seguro
    - `techContext.md` – habilidades del equipo, restricciones de despliegue, integraciones
4. Crea / actualiza `activeContext.md` enlazando o embebiendo **todos** los archivos anteriores.
5. Garantiza la integridad de la carpeta:
    
    ```
    memory_bank/
      projectbrief.md
      productContext.md
      systemPatterns.md
      techContext.md
      activeContext.md
      tasks.md
      progress.md
    
    ```
    
6. Si `tasks.md` o `progress.md` no existen, crea versiones de marcador con solo la cabecera.
7. **Tech Stack** → escribe en `techContext.md` (sobrescribe si hay duda):
    - **Backend**: Dockerised Python 3.12, Django, Celery, Redis, MySQL
    - **Frontend**: React (JavaScript/TypeScript)
    - **AI / RAG**: OpenAI API, Qdrant vector store
    - **Infrastructure**: Docker Compose / Swarm, CI/CD vía GitHub Actions
        
        *No sustituyas ni amplíes este stack salvo indicación expresa.*
        

---

## Functionalities, Requirements & Scope Definition

*(⚠️ **Nada de tablas Markdown**—usa listas con viñetas.)*

Para cada funcionalidad especifica:

- **Title** – nombre orientado al negocio
- **Detailed description** – propósito, historias de usuario clave, criterios de aceptación, notas de modelo de datos
- **Status flag** – `CORE` (imprescindible), `OPTIONAL` (deseable) o `FUTURE` (hoja de ruta post-MVP)
- **Dependencies & integrations** – APIs externas, servicios u otras funciones necesarias
- **Non-functional requirements** – rendimiento, seguridad, cumplimiento, etc. (cuando proceda)

Finaliza con una lista **Scope Boundary** que indique con claridad qué está **dentro** y qué **fuera** de alcance según el conocimiento actual.

*No incluyas estimaciones de esfuerzo, cronogramas ni desgloses de sprints—eso le corresponde al Planner Agent.*

**Ejemplo de formato (sustituye por ítems reales):**

- **User account & auth** `CORE`
    - Inicio de sesión por email/contraseña + OAuth2 social
- **Reporting dashboard** `OPTIONAL`
    - Gráficos en tiempo real y exportación CSV
- **AI Content Generator** `FUTURE`
    - Redacta posts para redes usando OpenAI

---

## Nivel de detalle y supuestos

- Sé exhaustivo: historias de usuario, criterios de aceptación, bocetos de datos, casos límite.
- Si falta algo, inventa un valor razonable y márcalo con `??`.
- Usa encabezados claros y listas; evita tablas.
- Un Planner Agent aparte derivará los calendarios—no dupliques su trabajo.

---

## Salida (sin tablas en los archivos generados)

Dentro de **`${MEMORY_BANK_PATH}`** crea o actualiza:

- Todos los archivos base (`projectbrief.md`, …, `progress.md`).
- **`functionalities.md`** — catálogo de *Functionalities, Requirements & Scope Definition* (formato con viñetas). Enlázalo desde `activeContext.md`.
- Asegúrate de que cada archivo sea Markdown UTF-8.

Al terminar las operaciones, responde con un resumen conciso de lo hecho o pendiente y finaliza tu mensaje con **`DONE VAN`**.

---

## Project Requirements 

### 1. Vision & Purpose

...

### 2. Multi-Tenancy & Account Model

...

### 3. MVP Functionality (`CORE`)

...

### 4. Future Roadmap (`OPTIONAL`)

...

### 5. Integrations

...

### 6. Non-Functional Requirements

...

### 7. Deployment & Infrastructure

...

### 8. Scope Boundary

**In scope (MVP)**

...

**Out of scope (MVP)**

...